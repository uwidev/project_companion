[gd_scene load_steps=4 format=2]

[ext_resource path="res://04_dialogue/epilogue_ending_2_END.tres" type="Resource" id=1]

[sub_resource type="GDScript" id=2]
script/source = "extends NodeEventRoot

# Virutal
func _span_conditions(ctx) -> bool:
	return ctx[0].is_player and ctx[1].name == \"pillow\"
"

[sub_resource type="GDScript" id=1]
script/source = "extends NodeEvent
# Every event needs to have their own script, extended from NodeEvent


# Virutal
func _span_conditions(ctx) -> bool:
	# Denotes any conditions that are required from this event AND are required 
	# for any further events in this series.
	#
	# Returns true if context satisfies that this event can trigger.
	return get_parent()._span_conditions(ctx) and true

func _can_trigger_from(ctx:Array) -> bool:
	# Denotes any conditions that are specific to this event. This WILL and
	# SHOULD check _span_conditions(ctx) to make sure previous conditions also
	# return true (e.g. ensure the current day is always > 30).
	#
	# Returns true if context satisfies that this event can trigger.
	return _span_conditions(ctx) and ctx.back() == \"epilogue_opening_END\"

func _before_trigger(ctx:Array):
	# Any setup that needs to be done before the actual event triggers.
	pass

func _on_trigger(ctx:Array):
	# The actual happening of the event, usually dialogue stuff.
	DialogueManager.show_example_dialogue_balloon(\"main\", dialogue)
	yield(DialogueManager, \"dialogue_finished\")
	
func _after_trigger(ctx:Array):
	# Cleanup, usually modifying the initiator to let them know they've now
	# seen this event.
	ctx[0].add_seen(get_full_name())
"

[node name="epilogue_ending_2" type="Node"]
script = SubResource( 2 )
priority = 1
trigger_by_events = true

[node name="END" type="Node" parent="."]
script = SubResource( 1 )
dialogue = ExtResource( 1 )
